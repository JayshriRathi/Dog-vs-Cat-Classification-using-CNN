# -*- coding: utf-8 -*-
"""dog_vs_cat classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H2pWUNFa8GM7jmx7N6mGG3AkWxbFXfa1

#🐱🐶 Cat and Dog Classification Using CNN –

##Overview
Objective: To build a machine learning model that can accurately distinguish between images of cats and dogs using a Convolutional Neural Network (CNN).

install Tensorflow
"""

!pip install tensorflow
import tensorflow as tf
import tensorflow_datasets as tfds

"""Import liabraries"""

import tensorflow as tf
import tensorflow_datasets as tfds
import os

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dataset,info = tfds.load('cats_vs_dogs', with_info = True, as_supervised = True)

info

class_names = info.features['label'].names
class_names

for i,example in enumerate(dataset['train']):
  #example = (image,label)
  image,label = example
  save_dir = './cats_vs_dogs/train/{}'.format(class_names[label])
  os.makedirs(save_dir,exist_ok=True)

  print(save_dir)
  filename = save_dir + "/" + "{}_{}.jpg".format(class_names[label],i)
  tf.keras.preprocessing.image.save_img(filename,image.numpy())
  #print(filename)
  #break



from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout,BatchNormalization
from tensorflow.keras.models import Sequential

datagen = ImageDataGenerator(rescale=1/255,validation_split=0.2, rotation_range =10,
                             width_shift_range = 0.1, height_shift_range = 0.1,
                             shear_range = 0.1, zoom_range = 0.10, horizontal_flip =True)

train_generator = datagen.flow_from_directory('/content/cats_vs_dogs/train',
                                              target_size = (150,150),
                                              batch_size = 1024,
                                              class_mode= 'binary',
                                              subset = 'training')


validation_generator = datagen.flow_from_directory('/content/cats_vs_dogs/train',
                                              target_size = (150,150),
                                              batch_size = 1024,
                                              class_mode= 'binary',
                                              subset = 'validation')

"""CNN Model"""

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, BatchNormalization, Dropout, Flatten, Dense

model = Sequential()

#1st layer cnn

model.add(Conv2D(32, kernel_size =3, activation = 'relu', input_shape = (150,150,3)))
model.add(MaxPooling2D(2))
model.add(BatchNormalization())
model.add(Dropout(0.2))

#2nd layer cnn

model.add(Conv2D(64, kernel_size =3, activation= 'relu'))
model.add(MaxPooling2D(2))
model.add(BatchNormalization())
model.add(Dropout(0.2))

#3rd layer cnn

model.add(Conv2D(128, kernel_size =3, activation= 'relu'))
model.add(MaxPooling2D(2))
model.add(BatchNormalization())
model.add(Dropout(0.2))

model.add(Flatten())
model.add(Dropout(0.5))
model.add(Dense(512, activation ='relu'))
model.add(Dense(1,activation = 'sigmoid'))

model.summary()

model.compile(loss= 'binary_crossentropy', optimizer ='adam', metrics = ['accuracy'])

history =model.fit(train_generator,epochs = 4, validation_data = validation_generator)

history.history

plt.plot(history.history['accuracy'], label = 'Training')
plt.plot(history.history['val_accuracy'], label = 'Validation')
plt.legend('Training','validation')
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')

"""Save model"""

model.save('cats_vs_dogs.h5')

"""load model"""

model_load = tf.keras.models.load_model('cats_vs_dogs.h5')

import requests
from PIL import Image
from tensorflow.keras.preprocessing import image

img_url = "https://www.shutterstock.com/shutterstock/photos/2511750607/display_1500/stock-photo-a-photograph-of-a-happy-muddy-dog-sitting-on-a-white-carpet-in-a-brightly-lit-living-room-with-2511750607.jpg"
img = Image.open(requests.get(img_url, stream = True).raw).resize((150,150))

img_array = image.img_to_array(img)
img = np.expand_dims(img_array, axis =0 )

img = img/255
prediction = model.predict(img)

prediction

TH =0.5

prediction = int(prediction[0][0] > TH)
type(prediction)

import matplotlib.pyplot as plt
import requests
from PIL import Image
from io import BytesIO

# Example image URL
img_url = 'https://www.shutterstock.com/shutterstock/photos/2330719195/display_1500/stock-photo-portrait-of-a-cat-and-dog-in-front-of-bright-in-the-photo-two-dogs-brimming-with-joy-and-2330719195.jpg'
try:
    # Fetch the image from the URL
    response = requests.get(img_url, stream=True)  # Add stream=True for large files
    response.raise_for_status()  # Raise an exception for bad status codes (like 403)
    img = Image.open(BytesIO(response.content))

    # Display the image using Matplotlib
    plt.imshow(img)
    plt.axis('off')  # Hide axes
    plt.show()

except requests.exceptions.RequestException as e:
    print(f"Error fetching image: {e}")
except PIL.UnidentifiedImageError as e:
    print(f"Error opening image: {e}")

classes = { v:k for k,v in train_generator.class_indices.items()}
classes

"""Key points:

The model used Keras' flow_from_directory() to automatically assign class labels based on folder names.

The training process normalized images and resized them appropriately for CNN input.

Predictions were made using .predict() and np.argmax().

Custom images were preprocessed similarly before being passed to the model for testing.

Image visualization was done using matplotlib.

##conclusion

In this project, we successfully built a Convolutional Neural Network (CNN) model to classify images of cats and dogs using TensorFlow and Keras. The model was trained using images organized in separate folders for each class (cat/, dog/), and the training data was preprocessed using ImageDataGenerator.

Once the model was trained, we tested it using custom images, including one fetched from a live URL showing both a cat and a dog. Despite the image containing both animals, the model predicted a single class (as expected in binary classification) — either 'cat' or 'dog'
"""

